// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/adg/go-project/src/util/database/nsq (interfaces: NsqProducer)

// Package nsq is a generated GoMock package.
package nsq

import (
	gomock "github.com/golang/mock/gomock"
	go_nsq "github.com/nsqio/go-nsq"
	reflect "reflect"
	time "time"
)

// MockNsqProducer is a mock of NsqProducer interface
type MockNsqProducer struct {
	ctrl     *gomock.Controller
	recorder *MockNsqProducerMockRecorder
}

// MockNsqProducerMockRecorder is the mock recorder for MockNsqProducer
type MockNsqProducerMockRecorder struct {
	mock *MockNsqProducer
}

// NewMockNsqProducer creates a new mock instance
func NewMockNsqProducer(ctrl *gomock.Controller) *MockNsqProducer {
	mock := &MockNsqProducer{ctrl: ctrl}
	mock.recorder = &MockNsqProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNsqProducer) EXPECT() *MockNsqProducerMockRecorder {
	return m.recorder
}

// DeferredPublish mocks base method
func (m *MockNsqProducer) DeferredPublish(arg0 string, arg1 time.Duration, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeferredPublish", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeferredPublish indicates an expected call of DeferredPublish
func (mr *MockNsqProducerMockRecorder) DeferredPublish(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeferredPublish", reflect.TypeOf((*MockNsqProducer)(nil).DeferredPublish), arg0, arg1, arg2)
}

// MultiPublish mocks base method
func (m *MockNsqProducer) MultiPublish(arg0 string, arg1 [][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiPublish", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MultiPublish indicates an expected call of MultiPublish
func (mr *MockNsqProducerMockRecorder) MultiPublish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiPublish", reflect.TypeOf((*MockNsqProducer)(nil).MultiPublish), arg0, arg1)
}

// Publish mocks base method
func (m *MockNsqProducer) Publish(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockNsqProducerMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockNsqProducer)(nil).Publish), arg0, arg1)
}

// PublishAsync mocks base method
func (m *MockNsqProducer) PublishAsync(arg0 string, arg1 []byte, arg2 chan *go_nsq.ProducerTransaction, arg3 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishAsync", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishAsync indicates an expected call of PublishAsync
func (mr *MockNsqProducerMockRecorder) PublishAsync(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishAsync", reflect.TypeOf((*MockNsqProducer)(nil).PublishAsync), varargs...)
}
